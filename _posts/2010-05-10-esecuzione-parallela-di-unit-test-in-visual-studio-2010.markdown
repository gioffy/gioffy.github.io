---
layout: post
status: publish
published: true
title: Esecuzione parallela di Unit Test in Visual Studio 2010
author: imperugo
author_login: imperugo
author_email: imperugo@gmail.com
wordpress_id: 1503
wordpress_url: http://imperugo.tostring.it/blog/post/esecuzione-parallela-di-unit-test-in-visual-studio-2010/
date: 2010-05-10 16:45:00.000000000 +01:00
categories:
- .NET
tags:
- Visual Studio 2010
- Unit Test
comments: true
---
<p>Molto probabilmente ne avranno parlato in tanti, ma scopro solo ora che in <a title="Visual Studio 2010" href="http://tostring.it/tags/archive/visual+studio+2010" target="_blank">Visual Studio 2010</a> è possibile eseguire più Unit Test contemporaneamente se si ha a disposizione una o più CPU MultiCore; ma partiamo con ordine e vediamo come nasce questa esigenza e in quali casi tale approccio può aiutarci.     <br />Dato il continuo aumentare dei test in Dexter, alcuni dei quali impiegano un tempo piuttosto alto (es: gli Smock Test, che verificano il funzionamento di tutte le skin e dei metodi asincroni), mi sono chiesto se era possibile far sì che l’esecuzione di tutti questi test non fosse seriale ma parallela, in modo da ridurre il tempo di esecuzione. Fortunatamente “sbingando” un po’ ho trovato <a title="Executing Unit Tests in parallel on a multi-CPU/core machine" href="http://blogs.msdn.com/vstsqualitytools/archive/2009/12/01/executing-unit-tests-in-parallel-on-a-multi-cpu-core-machine.aspx" rel="nofollow" target="_blank">questo</a> interessantissimo post che spiega come la cosa sia fattibile con Visual Studio 2010.</p>  <p>I test sono una cosa seria :), e prima di scegliere un approccio del genere è necessario sapere che l’esecuzione parallela dei test richiede che alcune regole siano rispettate, quindi è bene sapere che essa:</p>  <ul>   <li>è utilizzabile solo in macchine multi Core/CPU; </li>    <li>richiede che tutti i test siano Thread Safe; </li>    <li>è utilizzabile solo per gli Unit Test (quindi gli Smock Test non ne trarrebbero beneficio); </li>    <li>è utilizzabile solo per i test in esecuzione sulla propria macchina; </li>    <li>richiede che i Data Adapter siano disabilitati; </li> </ul>  <p>Per tutta questa serie di motivi questa opportunità non è attiva di default, e quindi è necessario andare specificare che tutte le regole sopra elencate sono state rispettate e che vogliamo eseguire più test in parallelo.</p>  <p>Per prima cosa è necessario andare a modificare la configurazione dei nostri test e disabilitare i “Data Adapter”; per far ciò è sufficiente fare doppio Click sul file “.testsetting” presente all’interno della nostra solutions: a questo punto dovrebbe aprirsi una finestra come la seguente, dove dobbiamo disabilitare tutte le checkbox presenti all’interno della scheda “Data and Diagnostics”:</p>  <p><a href="http://tostring.it/Content/Uploaded/image//imperugo/image.png" rel="shadowbox[UnitTestParallel]"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="image" border="0" alt="image" src="http://tostring.it/Content/Uploaded/image//imperugo/image_thumb.png" width="244" height="185" /></a> </p>  <p>Completato questo step è ora necessario modificare nuovamente lo stesso file, ma tramite l’editorXML, in quanto l’opzione che andremo ad impostare non è configurabile tramite la UI presente in Visual Studio.    <br />Quindi click con il destro sullo stesso file e selezione della voce “Open With”, ed a quel punto scelta della voce “XML (text) Editor”; da qui in poi è possibile andare a cambiare la configurazione dei test e modificare il nodo Execution, specificando l’attributo “parallelTestCount” ed impostandogli come valore il numero di Core/CPU che si intende utilizzare per l’esecuzione dei test (impostando 0 come valore, sarà il sistema a stabile il numero di Core/CPU da utilizzare).</p>  <p>A questo punto siamo abili ed arruolati per eseguire UnitTest in parallelo.    <br />VS2010 Rulez!</p>  <p>Ciauz</p>
